// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pigmemento.Api.Data;

#nullable disable

namespace Pigmemento.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251012165149_AddAttemptUserDateIndex")]
    partial class AddAttemptUserDateIndex
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pigmemento.Api.Models.Attempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("answer");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("case_id");

                    b.Property<bool>("Correct")
                        .HasColumnType("boolean")
                        .HasColumnName("correct");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<int>("TimeToAnswerMs")
                        .HasColumnType("integer")
                        .HasColumnName("time_ms");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserId", "CreatedAt");

                    b.HasIndex("UserId", "CaseId", "CreatedAt");

                    b.ToTable("attempts", (string)null);
                });

            modelBuilder.Entity("Pigmemento.Api.Models.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Diagnosis2")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("diagnosis_2");

                    b.Property<string>("Diagnosis3")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("diagnosis_3");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("difficulty");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("label");

                    b.Property<string>("Metadata")
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.HasKey("Id");

                    b.HasIndex("Difficulty");

                    b.HasIndex("Label");

                    b.ToTable("cases", (string)null);
                });

            modelBuilder.Entity("Pigmemento.Api.Models.TeachingPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid")
                        .HasColumnName("case_id");

                    b.Property<string>("Points")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("points");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.ToTable("teaching_points", (string)null);
                });

            modelBuilder.Entity("Pigmemento.Api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("citext")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_utc");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasDefaultValue("user")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Pigmemento.Api.Models.UserCaseStats", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uuid");

                    b.Property<int>("CorrectStreak")
                        .HasColumnType("integer")
                        .HasColumnName("correct_streak");

                    b.Property<DateTime>("LastAttemptAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_attempt_at")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime>("NextDueAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_due_at")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.HasKey("UserId", "CaseId");

                    b.HasIndex("CaseId");

                    b.HasIndex("NextDueAt");

                    b.ToTable("user_case_stats", (string)null);
                });

            modelBuilder.Entity("Pigmemento.Api.Models.WaitlistSubscriber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("citext");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("waitlist_subscribers", (string)null);
                });

            modelBuilder.Entity("Pigmemento.Api.Models.Attempt", b =>
                {
                    b.HasOne("Pigmemento.Api.Models.Case", "Case")
                        .WithMany("Attempts")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pigmemento.Api.Models.User", "User")
                        .WithMany("Attempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pigmemento.Api.Models.Case", b =>
                {
                    b.OwnsOne("Pigmemento.Api.Models.Patient", "Patient", b1 =>
                        {
                            b1.Property<Guid>("CaseId")
                                .HasColumnType("uuid");

                            b1.Property<int?>("Age")
                                .HasColumnType("integer")
                                .HasColumnName("patient_age");

                            b1.Property<string>("FitzpatrickType")
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("patient_fitzpatrick");

                            b1.Property<string>("Sex")
                                .HasMaxLength(16)
                                .HasColumnType("character varying(16)")
                                .HasColumnName("patient_sex");

                            b1.Property<string>("Site")
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)")
                                .HasColumnName("patient_site");

                            b1.HasKey("CaseId");

                            b1.ToTable("cases");

                            b1.WithOwner()
                                .HasForeignKey("CaseId");
                        });

                    b.Navigation("Patient")
                        .IsRequired();
                });

            modelBuilder.Entity("Pigmemento.Api.Models.TeachingPoint", b =>
                {
                    b.HasOne("Pigmemento.Api.Models.Case", "Case")
                        .WithMany("TeachingPoints")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");
                });

            modelBuilder.Entity("Pigmemento.Api.Models.UserCaseStats", b =>
                {
                    b.HasOne("Pigmemento.Api.Models.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pigmemento.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pigmemento.Api.Models.Case", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("TeachingPoints");
                });

            modelBuilder.Entity("Pigmemento.Api.Models.User", b =>
                {
                    b.Navigation("Attempts");
                });
#pragma warning restore 612, 618
        }
    }
}
